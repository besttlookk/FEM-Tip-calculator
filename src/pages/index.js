import React, { useState, useEffect } from "react";
import Head from "next/head";
import Input from "../components/Input";
import NumberBtn from "../components/NumberBtn";
import DollorIcon from "../images/icon-dollar.svg";
import PersonIcon from "../images/icon-person.svg";
import RupeeIcon from "../images/indian-rupee-sign-solid.svg";

export default function Home() {
  const [billInput, setBillInput] = useState("");
  const [personInput, setPersonInput] = useState("");
  const [customInput, setCustomInput] = useState("");
  const [tipPercent, setTipPercent] = useState(0);
  const [customError, setCustomError] = useState("");
  const [personError, setPersonError] = useState("");
  const [billError, setBillError] = useState("");
  const [totalTipPerPerson, setTotalTipPerson] = useState("0.00");
  const [totalAmountPerPerson, setTotalAmountPerPerson] = useState("0.00");

  const handleCalculation = () => {
    const totalTip = billInput * ((tipPercent * 1) / 100);
    setTotalTipPerson((totalTip / personInput).toFixed(2));
    const totalAmount = billInput + totalTip;
    setTotalAmountPerPerson((totalAmount / personInput).toFixed(2));
  };

  function resetResult() {
    setBillInput("");
    setPersonInput("");
    setCustomInput("");
    setTipPercent(0);
    resultReset();
    errorReset();
  }

  function errorReset() {
    setBillError("");
    setPersonError("");
    setCustomError("");
  }

  function resultReset() {
    setTotalTipPerson("0.00");
    setTotalAmountPerPerson("0.00");
  }

  useEffect(() => {
    errorReset();
    if (personInput === 0) {
      resultReset();
      setPersonError("Can't be Zero");
    }
    if (billInput === 0) {
      resultReset();
      setBillError("Can't be Zero");
    }
    if (billInput && personInput) {
      if (billInput > 99999) {
        setBillError("Number too high");
        setTotalTipPerson("0.00");
        setTotalAmountPerPerson("0.00");
        // setBillInput("");
        return;
      }
      handleCalculation();
    }
  }, [tipPercent, billInput, personInput]);

  return (
    <>
      <Head>
        <title>Tip-Cal | FEM</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* card */}
      <div className="flex flex-col w-full max-w-lg gap-2 p-6 bg-white rounded-xl md:rounded-3xl felx-col md:flex-row md:max-w-2xl lg:max-w-4xl md:w-90w md:gap-8 md:p-7 lg:p-8">
        {/* INPUT BOX */}
        <div className="flex flex-col gap-4 md:w-1/2 md:gap-8">
          {/* Bill input */}
          <Input
            label="Bill"
            value={billInput}
            setValue={setBillInput}
            error={billError}
            setError={setBillError}
          >
            <DollorIcon />
          </Input>
          {/* Tip input */}
          <div className="">
            <h3 className="mb-2 label">Select Tip%</h3>
            <div className="grid gap-3 grid-cols-autofill">
              {["5", "10", "15", "25", "50"].map((item) => (
                <NumberBtn
                  setTipPercent={setTipPercent}
                  setCustomInput={setCustomInput}
                  tipPercent={tipPercent}
                  label={item}
                  key={item}
                />
              ))}
              <form
                onSubmit={(e) => {
                  e.preventDefault();
                  setTipPercent(customInput);
                }}
                className="relative"
              >
                <input
                  type="number"
                  placeholder="Custom"
                  value={customInput}
                  max="100"
                  maxLength="3"
                  onChange={(e) => {
                    if (e.target.value >= 100) {
                      setCustomError("Can't me more than 100");
                      setCustomInput(100);
                    } else {
                      setCustomInput(e.target.value);
                    }
                  }}
                  className={`rounded-lg placeholder:text-primaryDark text-xl w-full h-full text-center outline-none bg-fade border-2 ${
                    customError
                      ? "border-danger"
                      : "focus:border-primary border-transparent"
                  }`}
                  onBlur={() => setTipPercent(customInput)}
                />
                {customError && (
                  <span className="absolute left-0 text-sm leading-3 text-danger -bottom-6">
                    {customError}
                  </span>
                )}
                <button type="submit" className="hidden"></button>
              </form>
            </div>
          </div>

          {/* Number of people input */}
          <div className="">
            <Input
              label="Number of People"
              value={personInput}
              setValue={setPersonInput}
              person
              error={personError}
              setError={setPersonError}
            >
              <PersonIcon />
            </Input>
          </div>
        </div>

        {/* Result BOX */}
        <div className="p-5 rounded-lg bg-primaryDark md:w-1/2 md:rounded-2xl md:p-8 md:flex md:flex-col">
          {/* tip amount */}
          <div className="result">
            <p className="result__label">
              Tip Amount <span>/ person</span>
            </p>
            <div className="result__amount">
              <RupeeIcon />

              <span>{totalTipPerPerson}</span>
            </div>
          </div>

          {/* total */}
          <div className="result">
            <p className="result__label">
              Total <span>/ person</span>
            </p>
            <div className="result__amount">
              <RupeeIcon />

              <span>{totalAmountPerPerson}</span>
            </div>
          </div>

          {/* reset Button */}
          <button
            className="block w-full py-2 mt-4 text-lg rounded-md text-primaryDark disabled:cursor-not-allowed disabled:brightness-50 bg-primary md:mt-auto justify-self-end"
            disabled={billInput && personInput ? false : true}
            onClick={resetResult}
          >
            RESET
          </button>
        </div>
      </div>
    </>
  );
}
